// author: Sebastian Klinger, 2021

//----------------Creating General variables-----------------------------------
int menu = 0;
int i;
int k;
unsigned long timeShow;
boolean option = 0;
boolean option_5 = 0;
boolean option_6 = 0;
boolean showLcd = 0;
unsigned long currentMillis_1;
unsigned long currentMillis_2;
unsigned long currentMillis_T;
unsigned long currentMillis_5;
unsigned long currentMillis_6;
// --------------------------------Temperature sensor--------------------------------
// epcb57550g1103 <-- NTC Thermistor which was used
const int SensorPinInlet = A5;  // Inlet Temperature
const int SensorPinOutlet = A4; // Outlet Temperature
double inlet_temperature;
double outlet_temperature;
double target_temperature_out = 75;
// --------------------------------stepper-motor--------------------------------
#include <AccelStepper.h>
AccelStepper stepper = AccelStepper(1, 13, 12); // A4988,stepPin,dirPin
double stepsPerSecond;
double min_motor = 1;
double max_motor = 180;
boolean motorState;
// --------------------------------LCD-Display--------------------------------
// 16x02 LCD Keypad Shield
#include <Wire.h>
#include <LiquidCrystal.h>
LiquidCrystal lcd (8, 9, 4, 5, 6, 7);

int button = 0;
int analog_value = 0;
const int button_right = 0;
const int button_up = 1;
const int button_down = 2;
const int button_left = 3;
const int button_select = 4;
const int button_none = 5;

// get the value of the internal resistance of pin A0 with this function
int status_of_buttons() {
  analog_value = analogRead(A0);
  if (analog_value > 1000) return button_none;
  else if (analog_value < 50)  {
    return button_right;
  }
  else if (analog_value < 195) {
    return button_up;
  }
  else if (analog_value < 380) {
    return button_down;
  }
  else if (analog_value < 555) {
    return button_left;
  }
  else if (analog_value < 790) {
    return button_select;
  }
  else return button_none; // if no button is pressed
}


// Refresh the display every 2s
void updateDisplay_1() {
  if (millis() - currentMillis_1 > 2000) {
    currentMillis_1 = millis();
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("In :");
    lcd.print(inlet_temperature, 1);
    lcd.setCursor(9, 0);
    lcd.print("C");
    lcd.setCursor(11, 0);
    lcd.print((stepsPerSecond * 0.3 * 0.01175), 2); // conversion from rpm to L/h

    lcd.setCursor(0, 1);
    lcd.print("Out:");
    lcd.print(outlet_temperature, 1);
    lcd.setCursor(9, 1);
    lcd.print("C");

    lcd.setCursor(11, 1);
    lcd.print(stepsPerSecond * 0.3, 1);

    Serial.print("DATA,TIME,");
    Serial.print(millis() / 1000);
    Serial.print(", ");
    Serial.print(target_temperature_out);
    Serial.print(", ");
    Serial.print(outlet_temperature);
    Serial.print(", ");
    Serial.println(stepsPerSecond * 0.3);
  }
}

void updateDisplay_2() {
  if (millis() - currentMillis_2 > 2000) {
    currentMillis_2 = millis();
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("steps/s: ");
    lcd.print(stepsPerSecond, 1);

    lcd.setCursor(0, 1);
    lcd.print("rpm:");
    lcd.print(stepsPerSecond * 0.3);
  }
}
void updateDisplay_5 () {
  if (millis() - currentMillis_5 > 1000) {
    currentMillis_5 = millis();
    if (option_5 == 1)  {
      lcd.clear();
      lcd.setCursor(0, 0);
      lcd.print("max_motor:");
      lcd.print(max_motor);
      lcd.setCursor(0, 1);
      lcd.print(".");
    }
    else {
      lcd.clear();
      lcd.setCursor(0, 0);
      lcd.print("max_motor:");
      lcd.print(max_motor);
    }
  }
}

void updateDisplay_6 () {
  if (millis() - currentMillis_6 > 2000) {
    currentMillis_6 = millis();
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("sPs: ");
    lcd.print(stepsPerSecond);
    lcd.print(" ");
    lcd.print((stepsPerSecond * 0.3 * 0.01175), 2); // conversion from rpm to L/h
    lcd.setCursor(0, 1);
    lcd.print("Out:");
    lcd.print(outlet_temperature, 1);
    lcd.setCursor(9, 1);
    lcd.print("C");

    Serial.print("DATA,TIME,");
    Serial.print(millis() / 1000);
    Serial.print(", ");
    Serial.print(target_temperature_out);
    Serial.print(", ");
    Serial.print(outlet_temperature);
    Serial.print(", ");
    Serial.println(stepsPerSecond * 0.3);
  }
}

// --------------------------------PID-Controller--------------------------------
#include <PID_v1.h>
int ki = 1;
int kp = 1;
int kd = 1;
PID myPID(&outlet_temperature, &stepsPerSecond, &target_temperature_out, ki, kp, kd, REVERSE); // "DIRECT" if opposite PID-control
//-------------------------read the temperature from the NTC Thermistor-----------------------
// the hardcoded values are manually calibrated
void readTemp() {
  if (millis() - currentMillis_T > 2000) {
    currentMillis_T = millis();
    inlet_temperature = (analogRead(SensorPinInlet) - 1177.00) / -7.1142857;
    outlet_temperature = (analogRead(SensorPinOutlet) - 1114.14285) / -2.0428571;

    // --------(Monitor/Plotter --> for calibration)-------
    //    Serial.print("Analog_in:");
    //    Serial.print(analogRead(SensorPinInlet));
    //    Serial.print(", ");
    //    Serial.print("Analog_out:");
    //    Serial.println(analogRead(SensorPinOutlet));
  }
}
//----------- control the stepper motor with PID-control ---------------------------
void pidControl() {
  if (outlet_temperature < 60) {
    min_motor = 1;
  }
  else {
    min_motor = 30;
  }
  myPID.SetOutputLimits(min_motor, max_motor);
  myPID.Compute();

  stepper.setSpeed(stepsPerSecond);
  stepper.runSpeed();
}
void rotateMotor() {
  stepper.setSpeed(stepsPerSecond);
  stepper.runSpeed();
}
// --------------------------------Setup--------------------------------
void setup() {
  Serial.begin(19200);
  Serial.println("CLEARDATA");                      // needed for excel import with PLX-DAQ-template
  Serial.println("LABEL,CLOCK,Timer in s,Temp_desired,Outlet_Temp,RPM");

  lcd.begin(16, 2);
  lcd.clear();

  stepper.setMaxSpeed(max_motor);

  myPID.SetMode(AUTOMATIC);
  delay(500);
}
// --------------------------------loop--------------------------------
void loop() {
  if (menu == 0) { //start page when turn on
    lcd.setCursor(0, 0);
    lcd.print("  Spray Dryer");
    delay(500);
    menu = 1;
  }
  else if (menu == 1) { //Normal mode
    updateDisplay_1();
    readTemp();
    pidControl();
  }
  
  else if (menu == 2) { //Pump rate
    readTemp();
    pidControl();
    updateDisplay_2();
  }
  else if (menu == 3) { //Target temperature
    if (option == 0) {
      lcd.setCursor(0, 0);
      lcd.print("T_out set:    ");
    }
    else { //blinking if selected
      if (millis() - timeShow > 200 && showLcd == 0) {
        lcd.setCursor(0, 0);
        lcd.print("T_out set:    ");
        showLcd = 1;
        timeShow = millis();
      }
      else if (millis() - timeShow > 200 && showLcd == 1) {
        lcd.setCursor(0, 0);
        lcd.print("              ");
        showLcd = 0;
        timeShow = millis();
      }
    }
    lcd.setCursor(0, 1);
    lcd.print(target_temperature_out);
    lcd.print(" degC      ");
  }
  else if (menu == 4) { //PID settings
    lcd.setCursor(0, 0);
    lcd.print("PID-settings: ");
    if (option == 0) {
      lcd.setCursor(0, 1);
      lcd.print("ki:");
      lcd.print(ki);
      lcd.print("kp:");
      lcd.print(kp);
      lcd.print(" kd:");
      lcd.print(kd);
      lcd.print("  ");
    }
    else {
      if (millis() - timeShow > 200 && showLcd == 0) {
        lcd.setCursor(0, 1);
        lcd.print("ki:");
        lcd.print(ki);
        lcd.print("kp:");
        lcd.print(kp);
        lcd.print(" kd:");
        lcd.print(kd);
        lcd.print("  ");
        showLcd = 1;
        timeShow = millis();
      }
      else if (millis() - timeShow > 200 && showLcd == 1) {
        if (k == 0) lcd.setCursor(0, 1);
        else if (k == 1)lcd.setCursor(5, 1);
        else if (k == 2) lcd.setCursor(11, 1);
        lcd.print("  ");
        showLcd = 0;
        timeShow = millis();
      }
    }
  }
  else if (menu == 5) {
    updateDisplay_5();
  }
  else if (menu == 6) {
    readTemp();
    pidControl();
    updateDisplay_6();
  }
  //------------------------Increasing/decreasing variables----------------------------------------
  button = status_of_buttons();
  if (button == button_down && menu < 6 && option == 0) {
    menu++;
    delay(300);
  }
  else if (button == button_up && menu > 1 && option == 0) {
    menu--;
    delay(300);
  }
  else if (button == button_right && option == 0) {
    option = 1;
    delay(300);
  }
  else if (button == button_left  && option == 1) {
    option = 0;
    delay(300);
  }
  else if (button == button_up && menu == 3 && option == 1) {
    target_temperature_out++;
    delay(300);
  }
  else if (button == button_down && menu == 3 && option == 1) {
    target_temperature_out--;
    delay(300);
  }
  else if (button == button_right && menu == 4 && option == 1 && k < 2) {
    k++;
    delay(300);
  }
  else if (button == button_up && menu == 4 && option == 1 && k == 0) {
    ki++;
    delay(300);
  }
  else if (button == button_up && menu == 4 && option == 1 && k == 1) {
    kp++;
    delay(300);
  }
  else if (button == button_up && menu == 4 && option == 1 && k == 2) {
    kd++;
    delay(300);
  }
  else if (button == button_down && menu == 4 && option == 1 && k == 0) {
    ki--;
    delay(300);
  }
  else if (button == button_down && menu == 4 && option == 1 && k == 1) {
    kp--;
    delay(300);
  }
  else if (button == button_down && menu == 4 && option == 1 && k == 2) {
    kd--;
    delay(300);
  }
  else if (button == button_right && menu == 5) {
    option_5 = 1;
    delay(100);
  }
  else if (button == button_left && menu == 5) {
    option_5 = 0;
    delay(100);
  }
  else if (button == button_down && menu == 5 && option_5 == 1) {
    max_motor = max_motor - 1.0;
    delay(200);
  }
  else if (button == button_up && menu == 5 && option_5 == 1) {
    max_motor = max_motor + 1.0;
    delay(200);
  }
  else if (button == button_right && menu == 6) {
    option_6 = 1;
    delay(100);
  }
  else if (button == button_left && menu == 6) {
    option_6 = 0;
    delay(100);
  }
  else if (button == button_down && menu == 6 && option_6 == 1) {
    stepsPerSecond--;
    delay(100);
  }
  else if (button == button_up && menu == 6 && option_6 == 1) {
    stepsPerSecond++;
    delay(100);
  }
  //  else if (button == button_up && menu == 5 && option == 1) motorState = 1;
  //  else if (button == button_down && menu == 5 && option == 1) motorState = 0;
} // end of loop





// Just for testing
//    readTemp();
//    lcd.clear();
//    lcd.setCursor(0, 0);
//    lcd.print("T_in: ");
//    lcd.print(inlet_temperature, 1);
//    lcd.print(" C");
//    lcd.setCursor(0, 1);
//    lcd.print("T_out:");
//    lcd.print(outlet_temperature, 1);
//    lcd.print("C ");
//    if (motorState == 1) {
//      pidControl();
//      if (option == 0) {
//        lcd.setCursor(13, 1);
//        lcd.print("ON ");
//      }
//      else {
//        if (millis() - timeShow > 200 && showLcd == 0) {
//          lcd.setCursor(13, 1);
//          lcd.print("ON ");
//          showLcd = 1;
//          timeShow = millis();
//        }
//        if (millis() - timeShow > 200 && showLcd == 1) {
//          lcd.setCursor(13, 1);
//          lcd.print("  ");
//          showLcd = 0;
//          timeShow = millis();
//        }
//      }
//    }
//    else {
//      if (option == 0) {
//        lcd.setCursor(13, 1);
//        lcd.print("OFF");
//      }
//      else {
//        if (millis() - timeShow > 200 && showLcd == 0) {
//          lcd.setCursor(13, 1);
//          lcd.print("OFF");
//          showLcd = 1;
//          timeShow = millis();
//        }
//        else if (millis() - timeShow > 200 && showLcd == 1) {
//          lcd.setCursor(13, 1);
//          lcd.print("   ");
//          showLcd = 0;
//          timeShow = millis();
//        }
//      }
//    }
